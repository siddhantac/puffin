#!/usr/bin/env bash
set -euo pipefail

# hledger-toast-chart: generate and open a TOAST UI line chart for account balances
#
# Examples:
#   hledger-toast-chart -f ~/.hledger.journal -m 6 assets:bank:09 assets:bank:first assets:bank:wffedcu assets:schwab:roth
#   hledger-toast-chart assets:checking assets:savings
#
# Flags:
#   -f FILE    Journal file (default: ~/.hledger.journal)
#   -m N       Number of months (default: 6)
#   -o FILE    Output HTML file (default: tmp/hledger_chart_YYYYMMDD_HHMMSS.html)
#   -t TITLE   Chart title (default: "Account balances (EOM)")
#   -n         Do NOT auto-open the HTML (default: auto-open)
#   --since S  Custom hledger period since spec (overrides -m), e.g. 'since 2025-01-01'
#   --no-open  Same as -n
#
# Requires: hledger, jq, open (macOS)

usage() {
  echo "Usage: $(basename "$0") [-f FILE] [-m N] [-o FILE] [-t TITLE] [--since SPEC] [--no-open] account..." >&2
}

JOURNAL="${HOME}/.hledger.journal"
MONTHS=6
OUT_DIR="$(pwd)/tmp"
TITLE="Account balances (EOM)"
AUTO_OPEN=1
SINCE_SPEC=""

# Parse args
ARGS=()
while [[ $# -gt 0 ]];
do
  case "$1" in
    -f)
      JOURNAL="$2"; shift 2;;
    -m)
      MONTHS="$2"; shift 2;;
    -o)
      OUT_HTML="$2"; shift 2;;
    -t)
      TITLE="$2"; shift 2;;
    --since)
      SINCE_SPEC="$2"; shift 2;;
    -n|--no-open)
      AUTO_OPEN=0; shift;;
    -h|--help)
      usage; exit 0;;
    --)
      shift; break;;
    -*)
      echo "Unknown option: $1" >&2; usage; exit 1;;
    *)
      ARGS+=("$1"); shift;;
  esac
done

if [[ ${#ARGS[@]} -eq 0 ]]; then
  echo "Error: provide one or more account names" >&2
  usage
  exit 1
fi

if ! command -v hledger >/dev/null 2>&1; then
  echo "Error: hledger is required" >&2; exit 1
fi
if ! command -v jq >/dev/null 2>&1; then
  echo "Error: jq is required" >&2; exit 1
fi

mkdir -p "$OUT_DIR"
STAMP=$(date +%Y%m%d_%H%M%S)
: "${OUT_HTML:=${OUT_DIR}/hledger_chart_${STAMP}.html}"

# Build period spec: last N months as columns (month boundaries), include historical (-H) for EOM balances
if [[ -n "$SINCE_SPEC" ]]; then
  PERIOD="$SINCE_SPEC"
else
  # Include current month; hledger columns for N months => since (N-1) months ago
  # Example: for 6 months, use since 5 months ago to get 6 boundaries
  N_MINUS_1=$((MONTHS-1))
  PERIOD="since ${N_MINUS_1} months ago"
fi

# Run one query per account to get clean rows
TMP_JSONS=()
for acct in "${ARGS[@]}"; do
  tmp_json="${OUT_DIR}/$(echo "$acct" | tr ':/ ' '___').json"
  hledger -f "$JOURNAL" -M -H -p "$PERIOD" bal "$acct" --output-format=json > "$tmp_json"
  TMP_JSONS+=("$tmp_json")
done

# Extract common categories from the first JSON (period start labels)
CATEGORIES=$(jq -r '[ .prDates[] | .[0].contents | tostring | sub("-..$"; "") ]' "${TMP_JSONS[0]}")

# Build series array: for each account JSON, pluck the EOM floatingPoint per column
SERIES='[]'
for i in "${!TMP_JSONS[@]}"; do
  acct="${ARGS[$i]}"
  json="${TMP_JSONS[$i]}"
  # prRows[0].prrAmounts is an array of columns; take .aquantity.floatingPoint or 0 when missing
  points=$(jq '[ ( .prRows[0].prrAmounts // [] )[] | (.[0].aquantity.floatingPoint // 0) ]' "$json")
  SERIES=$(jq --arg name "$acct" --argjson data "$points" '. + [{name: $name, data: $data}]' <<< "$SERIES")
done

# Fallback if categories or series are empty
if [[ "$(jq length <<< "$CATEGORIES")" -eq 0 ]]; then
  echo "Error: no data found for the selected period/accounts" >&2; exit 1
fi

# Write HTML
cat > "$OUT_HTML" <<EOF
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>${TITLE}</title>
  <link rel="stylesheet" href="https://uicdn.toast.com/chart/latest/toastui-chart.min.css">
  <style>
    body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif; margin: 20px; }
    #chart { width: 100%; max-width: 1100px; height: 560px; margin: 0 auto; }
    h1 { font-size: 20px; font-weight: 600; text-align: center; margin-bottom: 16px; }
  </style>
</head>
<body>
  <h1>${TITLE}</h1>
  <div id="chart"></div>

  <script src="https://uicdn.toast.com/chart/latest/toastui-chart.min.js"></script>
  <script>
    const data = {
      categories: ${CATEGORIES},
      series: ${SERIES}
    };

    const formatCurrency = (v) => {
      const n = Number(v);
      return isNaN(n) ? String(v) : n.toLocaleString(undefined, {style: 'currency', currency: 'USD', maximumFractionDigits: 2});
    };

    const el = document.getElementById('chart');
    const options = {
      chart: { width: Math.min(1100, el.clientWidth), height: 560, title: '${TITLE}' },
      xAxis: { title: 'Month' },
      yAxis: { title: 'Balance', label: { formatter: formatCurrency } },
      series: { showDot: true },
      legend: { align: 'bottom' },
      tooltip: { formatter: formatCurrency }
    };

    const chart = toastui.Chart.lineChart({ el, data, options });

    window.addEventListener('resize', () => {
      chart.resize({ width: Math.min(1100, el.clientWidth), height: 560 });
    });
  </script>
</body>
</html>
EOF

echo "Wrote: $OUT_HTML" >&2

if [[ "$AUTO_OPEN" -eq 1 ]]; then
  open "$OUT_HTML" >/dev/null 2>&1 || true
fi

